# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
# Backup Schemas

type LocationBackup @model {
  id: ID!
  nickName: String!
  custName: String!
  zoneName: String
  addr1: String
  addr2: String
  city: String
  zip: String
  email: String
  firstName: String
  lastName: String
  phone: String
  toBePrinted: Boolean
  toBeEmailed: Boolean
  printDuplicate: Boolean
  terms: String
  invoicing: String
  prodsNotAllowed: [String]
  latestFirstDeliv: Float
  latestFinalDeliv: Float
  webpageURL: String
  picURL: String
  gMap: String
  specialInstructions: String
  delivOrder: Int
  customProd: [String]
  templateProd: [String]
  userSubs: [String]
  qbID: String
  currentBalance: String
}

type ProductBackup @model @auth(rules: [{ allow: public }]) {
  id: ID!
  prodName: String!
  nickName: String!
  packGroup: String
  packSize: Int
  doughType: String
  freezerThaw: Boolean
  eodCount: Boolean
  packGroupOrder: Int
  readyTime: Float
  bakedWhere: [String]
  wholePrice: Float
  retailPrice: Float
  isWhole: Boolean
  depends: String
  weight: Float
  descrip: String
  picURL: String
  squareID: String
  currentStock: Int
  whoCountedLast: String
  forBake: String
  bakeExtra: Int
  batchSize: Int
  preshaped: Int
  prepreshaped: Int
  updatePreDate: String
  updateFreezerDate: String
  backporchbakerypre: Int
  backporchbakery: Int
  bpbextrapre: Int
  bpbextra: Int
  bpbssetoutpre: Int
  bpbssetout: Int
  defaultInclude: Boolean
  leadTime: Int
  qbID: String
  freezerCount: Int
  freezerClosing: Int
  sheetMake: Int
  freezerNorth: Int
  freezerNorthClosing: Int
  freezerNorthFlag: String
}

# Base Schemas

type Location @model {
  locNick: String! @primaryKey
  locName: String!
  subs: [LocationUser] @hasMany(indexName: "byLoc", fields: ["locNick"])
  zoneID: String
  zone: Zone @hasOne(fields: ["zoneID"])
  addr1: String
  addr2: String
  city: String
  zip: String
  email: String
  phone: String
  toBePrinted: Boolean
  toBeEmailed: Boolean
  printDuplicate: Boolean
  terms: String
  invoicing: String
  latestFirstDeliv: Float
  latestFinalDeliv: Float
  webpageURL: String
  picURL: String
  gMap: String
  specialInstructions: String
  delivOrder: Int
  qbID: String
  currentBalance: String
  prodsNotAllowed: [ProdsNotAllowed]
    @hasMany(indexName: "byProd", fields: ["locNick"])
  customProd: [AltPricing] @hasMany(indexName: "byLoc", fields: ["locNick"])
  templateProd: [TemplateProd]
    @hasMany(indexName: "byTemp", fields: ["locNick"])
}

type User @model {
  name: String!
  email: String!
  phone: String
  sub: String! @primaryKey
  locNick: String
  defaultLoc: Location @hasOne(fields: ["locNick"])
  locs: [LocationUser] @hasMany(indexName: "bySub", fields: ["sub"])
}

type Product @model {
  id: ID!
  prodName: String!
  prodNick: String! @primaryKey
  packGroupID: ID
  packGroup: PackGroup @hasOne(fields: ["packGroupID"])
  packSize: Int
  doughNick: String
  doughType: Dough @hasOne(fields: ["doughNick"])
  freezerThaw: Boolean
  packGroupOrder: Int
  readyTime: Float
  bakedWhere: [String]
  wholePrice: Float
  retailPrice: Float
  isWhole: Boolean
  weight: Float
  descrip: String
  picURL: String
  squareID: String
  forBake: String
  bakeExtra: Int
  batchSize: Int
  defaultInclude: Boolean
  leadTime: Int
  qbID: String
  depends: [ProductDepend] @hasMany(indexName: "byProd2", fields: ["prodNick"])
  altPricing: [AltPricing] @hasMany(indexName: "byProd", fields: ["prodNick"])
  templateProd: [TemplateProd]
    @hasMany(indexName: "byTemp", fields: ["prodNick"])
  prodsNotAllowed: [ProdsNotAllowed]
    @hasMany(indexName: "byProd", fields: ["prodNick"])
  productVendor: [ProductVendor]
    @hasMany(indexName: "byProd", fields: ["prodNick"])
  EODCount: EODCount @hasOne
  ActualSetOut: ActualSetOut @hasOne
}

type Zone @model {
  zoneNick: String! @primaryKey
  zoneName: String
  description: String
  zoneFee: Int
  zoneRoute: [ZoneRoute] @hasMany(indexName: "byZone", fields: ["zoneNick"])
}

type Route @model {
  routeNick: String! @primaryKey
  routeName: String
  routeStart: Float
  routeTime: Float
  RouteDepart: String
  RouteArrive: String
  RouteSched: [String]
  printOrder: Int
  driver: String
  zoneRoute: [ZoneRoute] @hasMany(indexName: "byRoute", fields: ["routeNick"])
}

type Dough @model {
  doughNick: String! @primaryKey
  doughName: String
  hydration: Float
  batchSize: Float
  mixedWhere: String
  components: [DoughComponent] @hasMany
  isBakeReady: Boolean
  buffer: Float
  saltInDry: Boolean
}

type DoughComponent @model {
  id: ID!
  componentType: String
  inventoryID: ID
  inventoryName: Inventory @hasOne(fields: ["inventoryID"])
  unitID: ID
  unit: Unit @hasOne(fields: ["unitID"])
  amount: Float
}

type Inventory @model {
  id: ID!
  ingName: String!
  ingNick: String!
  ingTypeID: ID
  ingType: IngType @hasOne(fields: ["ingTypeID"])
  vendor: [Vendor] @hasMany
  product: [Product] @hasMany
  unitID: ID
  unit: Unit @hasOne(fields: ["unitID"])
  bakeryLocation: String
  intLocNick: String
  internalLocation: InternalLoc @hasOne(fields: ["intLocNick"])
  whoCounted: String
}

type Unit @model {
  id: ID!
  unitName: String
}

type InternalLoc @model {
  intLocNick: String! @primaryKey
  bakeryLoc: String!
    @index(name: "byBakeryLoc", queryField: "internalByBakeryLoc")
  intLocDescrip: String!
}

type IngType @model {
  id: ID!
  unitName: String
}

type Vendor @model {
  vendorName: String!
  vendorNick: String! @primaryKey
  productVendor: [ProductVendor]
    @hasMany(indexName: "byVend", fields: ["vendorNick"])
}

type EODCount @model {
  id: ID!
  prodNick: String!
  product: Product! @belongsTo(fields: ["prodNick"])
  shelfOrFreezer: String
  startOrFinish: String
  location: String
  qty: Int
  whoCounted: String
}

type PocketCount @model {
  id: ID!
  doughNick: String!
  doughType: Dough! @hasOne(fields: ["doughNick"])
  size: Int
  qty: Int
  whoCounted: String
}

type ActualSetOut @model {
  id: ID!
  prodNick: String!
  prodName: Product! @belongsTo
  qty: Int
  location: String
  whoSetOut: String
}

type CroixSheetCount @model {
  id: ID!
  qty: Int
  whoCounted: String
}

type PackGroup @model {
  id: ID!
  packGroup: String!
}

type OldDough @model {
  id: ID!
  doughID: String!
  dough: Dough @hasOne(fields: ["doughID"])
  qty: Int
}

type BucketInfo @model {
  id: ID!
  doughID: String!
  dough: Dough @hasOne(fields: ["doughID"])
  bucketType: String
  qty: Int
  totalDoughWeight: Int
  whoMixed: String
}

type Notes @model {
  id: ID!
  note: String
  forWhom: String
  byWhom: String
  when: String
}

type InfoQBAuth @model {
  id: ID!
  infoName: String
  infoContent: String
}

type EventLog @model {
  id: ID!
  eventType: String!
  eventDescrip: String
  userID: String
  user: User @hasOne(fields: ["userID"])
}

type Invoice @model {
  id: String! @primaryKey
  orders: [Order] @hasMany
  locNick: String!
  location: Location @hasOne(fields: ["locNick"])
}

type Order @model {
  id: ID!
  qty: Int
  prodNick: String!
  product: Product! @hasOne(fields: ["prodNick"])
  locNick: String!
  location: Location! @hasOne(fields: ["locNick"])
  PONote: String
  fulfill: String
  SO: Int
  isWhole: Boolean
  delivDate: String
  rate: Float
  isLate: Int
}

# Join Schemas

type TemplateProd @model {
  id: ID!
  locNick: String! @index(name: "byLoc")
  prodNick: String! @index(name: "byTemp")
  location: Location! @belongsTo(fields: ["locNick"])
  product: Product! @belongsTo(fields: ["prodNick"])
}

type ProdsNotAllowed @model {
  id: ID!
  locNick: String! @index(name: "byLoc")
  prodNick: String! @index(name: "byProd")
  location: Location! @belongsTo(fields: ["locNick"])
  product: Product! @belongsTo(fields: ["prodNick"])
}

type ProductDepend @model {
  id: ID!
  prod1Nick: String @index(name: "byProd1")
  prod1: Product! @belongsTo(fields: ["prod1Nick"])
  prod2Nick: String @index(name: "byProd2")
  prod2: Product @belongsTo(fields: ["prod2Nick"])
}

type ZoneRoute @model {
  id: ID!
  routeNick: String @index(name: "byRoute")
  route: Route! @belongsTo(fields: ["routeNick"])
  zoneNick: String @index(name: "byZone")
  zone: Zone @belongsTo(fields: ["zoneNick"])
}

type LocationUser @model {
  id: ID!
  authType: Int
  locNick: String! @index(name: "byLoc", sortKeyFields: ["authType"])
  sub: String! @index(name: "bySub", sortKeyFields: ["authType"])
  location: Location! @belongsTo(fields: ["locNick"])
  user: User! @belongsTo(fields: ["sub"])
}

type AltPricing @model {
  id: ID!
  wholePrice: Float
  locNick: String @index(name: "byLoc", sortKeyFields: ["wholePrice"])
  loc: Location! @belongsTo(fields: ["locNick"])
  prodNick: String @index(name: "byProd", sortKeyFields: ["wholePrice"])
  product: Product @belongsTo(fields: ["prodNick"])
}

type ProductVendor @model {
  id: ID!
  prodNick: String! @index(name: "byProd")
  vendorNick: String! @index(name: "byVend")
  product: Product! @belongsTo(fields: ["prodNick"])
  vendor: Vendor! @belongsTo(fields: ["vendorNick"])
}
