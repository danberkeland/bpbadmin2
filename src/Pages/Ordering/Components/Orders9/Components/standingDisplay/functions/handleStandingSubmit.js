import { getTransitionDates, getTtl, getWeekday, getWorkingDateTime } from "../../../../../Functions/dateAndTime"
import { gqlFetcher } from "../../../../../Data/fetchers"
import * as queries from '../../../../../Data/gqlQueries'

import { fetchTransitionOrders } from "../../../../../Data/orderData"
import { mutate } from "swr"

/**
 * Decides which standing order items have been changed, and submit the appropriate mutation to the DB.
 * 
 * Preserves orders up to 3 days out by converting any items generated by the current standing order to
 * cart order items.
 */
const handleStandingSubmit = async (location, isWhole, standingBase, standingChanges, mutateStanding, userName) => {
  const cartOrders = await fetchTransitionOrders(location)

  let _cartOrders = cartOrders.filter(item => item.isWhole === isWhole)
  let _standingBase = Object.values(standingBase).filter(item => (item.isWhole === isWhole && item.isStand === true))
  let _standingChanges = Object.values(standingChanges).filter(item => (item.isWhole === isWhole && item.isStand === true))

  const transitionDates = getTransitionDates('UTCString')
  for (let utcDate of transitionDates) {
    let delivDateISO = utcDate.split('T')[0]
    let dayOfWeek = getWeekday(new Date(utcDate))
    const cartItems = _cartOrders.filter(item => item.delivDate === delivDateISO)
    const standingBaseItems = _standingBase.filter(item => item.dayOfWeek === dayOfWeek)
    const standingChangeItems = _standingChanges.filter(item => item.dayOfWeek === dayOfWeek)

    let shouldMutateCart = false

    for (let changeItem of standingChangeItems) {
      let baseItem = standingBaseItems.find(item => item.product.prodNick === changeItem.product.prodNick)

      if (cartItems.findIndex(item => item.prodNick === changeItem.product.prodNick) !== -1) {
        if ((!baseItem && changeItem.qty > 0) || (baseItem && (baseItem.qty !== changeItem.qty))) {
          console.log(delivDateISO, dayOfWeek, changeItem.product.prodNick, `: cart item exists; take no action`)
        }
      } else {
        
        if (!baseItem && changeItem.qty > 0) {
          console.log(`${delivDateISO} ${changeItem.product.prodNick}_${dayOfWeek}_${changeItem.isWhole ? '1' : '0'}_1: Standing created & no cart; create cart item with 0 qty.`)
          let cartCreateItem = {
            locNick: location,
            isWhole: changeItem.isWhole,
            route: changeItem.route,
            delivDate: delivDateISO,
            prodNick: changeItem.product.prodNick,
            qty: 0,
            qtyUpdatedOn: new Date().toISOString(),
            sameDayMaxQty: 0,
            rate: null,
            ItemNote: changeItem.ItemNote,
            isLate: 0,
            updatedBy: 'standing_order',
            ttl: getTtl(new Date(utcDate))
          }

          let query = queries.createOrder
          let variables = { input: cartCreateItem }

          const response = await gqlFetcher(query, variables)
          console.log("Created cart order:", JSON.stringify(response.data.createOrder))
          shouldMutateCart = true

        }

        if (baseItem && (baseItem.qty !== changeItem.qty)) {
          console.log(`${delivDateISO} ${changeItem.product.prodNick}_${dayOfWeek}_${changeItem.isWhole ? '1' : '0'}_1: Standing changed & no cart; create cart item. with ${baseItem.qty} qty.`)
          // console.log(cartCreateItem)
          let cartCreateItem = {
            locNick: location,
            isWhole: baseItem.isWhole,
            route: baseItem.route,
            delivDate: delivDateISO,
            prodNick: baseItem.product.prodNick,
            qty: baseItem.qty,
            qtyUpdatedOn: new Date().toISOString(),
            sameDayMaxQty: baseItem.qty,
            rate: null,
            ItemNote: baseItem.ItemNote,
            isLate: 0,
            updatedBy: 'standing_order',
            ttl: getTtl(new Date(utcDate))
          }

          let query = queries.createOrder
          let variables = { input: cartCreateItem }

          const response = await gqlFetcher(query, variables)
          console.log("Created cart order:", JSON.stringify(response.data.createOrder))
          shouldMutateCart = true

        }
      }

    }

    
    if (shouldMutateCart) {
      console.log(`Revalidating cart data for ${delivDateISO} (if exists)`)
      let variables = {
        locNick: location,
        delivDate: delivDateISO
      }
      let key = [queries.listOrdersByLocationByDate, variables]
      mutate(
        key,
        undefined,
        { revalidate: true }
      )
    }

  }

  for (let dataKey of Object.keys(standingChanges)) {
    if (standingChanges[dataKey].dayOfWeek === 'placeholder') continue

    let changeItem = standingChanges[dataKey]

    if (dataKey in standingBase) {
      let baseItem = standingBase[dataKey]
      if (changeItem.qty !== baseItem.qty) {
        if (changeItem.qty > 0) {
          console.log("UPDATE", dataKey)

          // graphql updateStanding mutation
          let query = queries.updateStanding
          let variables = {
            input: {
              id: baseItem.id,
              qty: changeItem.qty
            }
          }
          const response = await gqlFetcher(query, variables)
          console.log("Updated standing order:", JSON.stringify(response.data.createStanding))
        }
        
        else {
          console.log("DELETE", dataKey)

          //graphql deleteStanding mutation
          let query = queries.deleteStanding
          let variables = {
            input: {
              id: baseItem.id
            }
          }
          const response = await gqlFetcher(query, variables)
          console.log("Deleted standing order:", JSON.stringify(response.data.deleteStanding))
        }
        
      }

    } else {
      if (changeItem.qty > 0) {
        console.log("CREATE", dataKey)

        // graphql createStanding mutation
        let query = queries.createStanding
        let variables = {
          input: {
            locNick: location,
            isWhole: changeItem.isWhole,
            isStand: changeItem.isStand,
            dayOfWeek: changeItem.dayOfWeek,
            route: changeItem.route,
            prodNick: changeItem.prodNick,
            qty: changeItem.qty,
            startDate: getWorkingDateTime('NOW').plus({ days: 4}).toISODate(),
            updatedBy: userName
          }
        }
        const response = await gqlFetcher(query, variables)
        console.log("Created standing order:", JSON.stringify(response.data.createStanding))

      }

    }
  }

  mutateStanding()

}

export default handleStandingSubmit