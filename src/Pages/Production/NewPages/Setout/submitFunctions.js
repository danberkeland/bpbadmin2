import { useListData } from "../../../../data/_listData";
import { 
  updateInfoQBAuth, 
  createInfoQBAuth
} from "../../../../graphql/mutations"

import { API, graphqlOperation } from "aws-amplify";

/**
 * Gets executed on confirmation when the Setout page loads. Generates separate
 * setout records for each location (Prado, Carlton).
 * @param {Object} input
 * @param {string} input.reportDate
 * @param {'Carlton'|'Prado'} input.reportLocation 
 */
export const recordSetoutTime = async ({ reportDate, reportLocation }) => {
  let input = {
    id: reportDate + reportLocation + "setoutTime",
    infoContent: "updated",
    infoName: reportLocation + "setoutTime",
  }

  try {
    await API.graphql(graphqlOperation(updateInfoQBAuth, { input }))
    console.log('QBInfo Updated')

  } catch (error) {
    try {
      await API.graphql(graphqlOperation(createInfoQBAuth, { input }))
      console.log('QBInfo Created')

    } catch (error) {
      console.log("error on updating info", error);
    }

  }
}



/**
 * CroixData is the same data used for table display on the Setout page.
 * Items should include the prodNick of the row's 'representative product'.
 * The row's 'total' will be saved to the product's prepreshaped field.
 * 
 * @param {Object} input
 * @param {any[]|undefined} input.croixData
 * @param {any} input.productCache - as generated by useListData. For submitting 
 * @returns 
 */
export const submitPrepreshaped = async ({
  croixData,
  productCache,
}) => {
  if (!croixData) {
    console.error("Error: setout data not found")
    return
  }

  const updateInputs = croixData.map(row => ({
    prodNick: row.setoutKey,
    prepreshaped: row.total
  }))
  const response = await productCache.submitMutations({ updateInputs })
  // console.log(response)
  productCache.updateLocalData( response )

}

